#日志根级别
#Log4j 根配置语法
#log4j.rootLogger = [ level ] , appenderName, appenderName, …指代 把指定级别的日志信息输出到指定的一个或者多个位置
#   level: OFF、FATAL、ERROR、WARN、INFO、DEBUG、ALL
#Log4j官方的appender给出了一下几种实现
#org.apache.log4j.ConsoleAppender（控制台），
#org.apache.log4j.FileAppender（文件），
#org.apache.log4j.DailyRollingFileAppender（每天产生一个日志文件），
#org.apache.log4j.RollingFileAppender（文件大小到达指定尺寸的时候产生一个新的文件），
#org.apache.log4j.WriterAppender（将日志信息以流格式发送到任意指定的地方）
#实际开发我们使用第1，第3和第4种实现

#log4j layout日志信息格式,Log4j提供的layout有以下几种
#org.apache.log4j.HTMLLayout（以HTML表格形式布局），
#org.apache.log4j.PatternLayout（可以灵活地指定布局模式），
#org.apache.log4j.SimpleLayout（包含日志信息的级别和信息字符串），
#org.apache.log4j.TTCCLayout（包含日志产生的时间、线程、类别等等信息）
#标准的html table表格格式，显示信息包括 线程 等级 类 报错信息；

#PatternLayout是我们以后推荐使用的，很灵活。ConversionPattern属性，灵活配置输出属性：
#%m 输出代码中指定的消息；
#%M 输出打印该条日志的方法名；
#%p 输出优先级，即DEBUG，INFO，WARN，ERROR，FATAL；
#%r 输出自应用启动到输出该log信息耗费的毫秒数；
#%c 输出所属的类目，通常就是所在类的全名；
#%t 输出产生该日志事件的线程名；
#%n 输出一个回车换行符，Windows平台为"rn”，Unix平台为"n”；
#%d 输出日志时间点的日期或时间，默认格式为ISO8601，也可以在其后指定格式，比如：%d{yyyy-MM-dd HH:mm:ss,SSS}，输出类似：2002-10-18 22:10:28,921；
#%l 输出日志事件的发生位置，及在代码中的行数；

#define properties
#log.file.path=D:/Logs/hai/hai.log4j.file.log
#log.daily.path=D:/Logs/hai/hai.log4j.daily.log
#log.rolling.path=D:/Logs/hai/hai.log4j.rolling.log

log.file.path=logs/hai/hai.log4j.file.log
log.daily.path=logs/hai/hai.log4j.daily.log
log.rolling.path=logs/hai/hai.log4j.rolling.log

#rootLogger
log4j.rootLogger = DEBUG,Console,File,DailyRollingFile,RollingFile

#Console
log4j.appender.Console=org.apache.log4j.ConsoleAppender
log4j.appender.Console.Target=System.out
log4j.appender.Console.layout=org.apache.log4j.PatternLayout
log4j.appender.Console.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %m%n

#File
log4j.appender.File=org.apache.log4j.FileAppender
log4j.appender.File.File=${log.file.path}
log4j.appender.File.layout=org.apache.log4j.PatternLayout
log4j.appender.File.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} %l  %m%n
#配置日志输出(至设备文件)级别，该级别必须高于rootLogger level
log4j.appender.File.Threshold=ERROR
log4j.appender.File.ImmediateFlush=TRUE
log4j.appender.File.Append=TRUE
#log4j.appender.File.DatePattern='.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.File.Encoding=UTF-8

#DailyRollingFile
log4j.appender.DailyRollingFile=org.apache.log4j.DailyRollingFileAppender
#log4j.appender.DailyRollingFile.File=D:/Logs/hai/hai.log4j.daily.log
log4j.appender.DailyRollingFile.File=${log.daily.path}
log4j.appender.DailyRollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.DailyRollingFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p [%c] - %m%n
log4j.appender.DailyRollingFile.Threshold=DEBUG
#log4j.appender.DailyRollingFile.Threshold=ERROR
log4j.appender.DailyRollingFile.ImmediateFlush=TRUE
log4j.appender.DailyRollingFile.Append=TRUE
#log4j.appender.DailyRollingFile.DatePattern='.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.DailyRollingFile.Encoding=UTF-8

#RollingFile 按指定容量输出
log4j.appender.RollingFile=org.apache.log4j.RollingFileAppender
log4j.appender.RollingFile.File=${log.rolling.path}
log4j.appender.RollingFile.MaxFileSize=1KB
#最大的存储文件数
log4j.appender.RollingFile.MaxBackupIndex=3
log4j.appender.RollingFile.layout=org.apache.log4j.PatternLayout
log4j.appender.RollingFile.layout.ConversionPattern=%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] %-5p [%c] - %m%n
log4j.appender.RollingFile.Threshold=DEBUG
##log4j.appender.RollingFile.Threshold=ERROR
log4j.appender.RollingFile.ImmediateFlush=TRUE
log4j.appender.RollingFile.Append=TRUE
#log4j.appender.RollingFile.DatePattern='.'yyyy-MM-dd-HH-mm'.log'
log4j.appender.RollingFile.Encoding=UTF-8
###log4j.logger.s2jsp.sg.ch04.ArrayIndexExceptionLog4j=info,file

#指定特定包的输出特定的级别
#log4j.logger.org.springframework=DEBUG
#log4j.logger.org.hibernate=DEBUG
#log4j.logger.org.apache.ibatis=DEBUG
#log4j.logger.com.alibaba=DEBUG